/*
**********************************************************************
**********************************************************************


                          OBJEE Airlines
                          
**********************************************************************
**********************************************************************
By Kent Altobelli
   Julian Blanco
   Tre Maxam
   Shane Corbett

*/


//Includes
#include <Wire.h>  // Included for I2C communication with MPU6050
#include <Servo.h>  // Included to drive output servos/gimbals
#include <PID_v1.h>
  //9dof
#include <Adafruit_Sensor.h>
#include <Adafruit_BNO055.h>
#include <utility/imumaths.h>
  //end9dof
  //barometer
#include <Adafruit_BMP085_U.h>
  
//servo declerations

 Servo elevatorservo;
 Servo raileronservo;
  Servo laileronservo;
 
#define elevatorservoo 4
#define raileironservoo 5
#define laileironservoo 6

#define SERVO_LOWER 1000
#define SERVO_UPPER 2000
#define SERVO_RANGE (SERVO_UPPER - SERVO_LOWER)





//Airspeed declerations
#define AIRSPEED 10
#define ELEV_REV 1
#define LAIL_REV -1
#define RAIL_REV -1
#define PITOT_APIN 0
#define PITOT_CENTER 519

bool pitot_attached = 0;
int raw_airspeed;
float airspeed = 0;
float last_airspeed = 0;


//ISR
#define ISR_FREQ 250  // Interrupt service routine frequency (62 to 7800 Hz)
// Loop variables
uint16_t dt;  // Stores time in micros for gyro integration
uint32_t start;
uint32_t finish;

volatile uint8_t ISR_count = 0;  // Count variable
volatile uint8_t orient_update = 0;  // Update orientation flag
volatile uint8_t servo_update = 0;  // Update servo positions
volatile uint8_t airspeed_update = 0;  // Update airspeed measurement
volatile uint8_t altitude_update = 0; //Update Altitude
//volatile uint8_t gps_update = 0; //Update Altitude
                    // Error code returned when MPU6050 is read
int temp;
long tic;
long toc;

//9dof
Adafruit_BNO055 bno = Adafruit_BNO055();


//barometer
Adafruit_BMP085_Unified bmp = Adafruit_BMP085_Unified(10085);
void displaySensorDetails(void)
{
  sensor_t sensor;
  bmp.getSensor(&sensor);
  Serial.println("------------------------------------");
  Serial.print  ("Sensor:       "); Serial.println(sensor.name);
  Serial.print  ("Driver Ver:   "); Serial.println(sensor.version);
  Serial.print  ("Unique ID:    "); Serial.println(sensor.sensor_id);
  Serial.print  ("Max Value:    "); Serial.print(sensor.max_value); Serial.println(" hPa");
  Serial.print  ("Min Value:    "); Serial.print(sensor.min_value); Serial.println(" hPa");
  Serial.print  ("Resolution:   "); Serial.print(sensor.resolution); Serial.println(" hPa");  
  Serial.println("------------------------------------");
  Serial.println("");
  delay(500);
}//end displaySensorDetails(void)



// Main functions
//void UpdateOrientation();
//void UpdateServos();
//void UpdateAirspeed();
//void CenterAll();

//end Altopilot




//oreintaion defententions
double aroll =0;
double apitch=0;
double ayaw=0;
double aailerion=0;
double aelevator=0;
double arudder=0;
double desiredRoll=0;
double desiredYaw=0;
double desiredPitch=0;


//PID

//Specify the links and initial tuning parameters
double rollKp=2, rollKi=5, rollKd=1;
double pitchKp=2, pitchKi=5, pitchKd=1;
double yawKp=2, yawKi=5, yawKd=1;

PID rollPID(&aroll  , &aailerion, &desiredRoll , rollKp, rollKi, rollKd, DIRECT);
PID pitchPID(&apitch, &aelevator, &desiredPitch, pitchKp, pitchKi, pitchKd, DIRECT);
PID yawPID(&ayaw    , &arudder  , &desiredYaw  , yawKp, yawKi, yawKd, DIRECT);





void setup() {
 
    //communcication init
    Serial.begin(9600);
     Wire.begin();  // Initialize I2C bus
     
     
    //PID INIT
 rollPID.SetMode(AUTOMATIC);
 pitchPID.SetMode(AUTOMATIC);
 yawPID.SetMode(AUTOMATIC);
 
 
 //servo init
  ServoInit();  // Initialize servos
  //attaches servos on pin 5-7 and intializes testing motion
  
 
  // InitializeISR
  ISR_init((float)ISR_FREQ);  // Initialize timer 2 at specified interrupt frequency

  // Airspeed sensor
  raw_airspeed = analogRead(PITOT_APIN);
  if (raw_airspeed > 500 && raw_airspeed < 575) pitot_attached = 1;
  Serial.println(pitot_attached);

  finish = micros();
  
  
  //9dof init
   Serial.println("Orientation Sensor Raw Data Test"); Serial.println("");
  
  /* Initialise the sensor */
  if(!bno.begin())
  {
    /* There was a problem detecting the BNO055 ... check your connections */
    Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
    while(1);
  }
  
  /* Display the current temperature */
  int8_t temp = bno.getTemp();
  Serial.print("Current Temperature: ");
  Serial.print(temp);
  Serial.println(" C");
  Serial.println("");
  
  bno.setExtCrystalUse(true);
  
  
  //altimiter init
  Serial.println("Pressure Sensor Test"); Serial.println("");
  
  /* Initialise the sensor */
  if(!bmp.begin())
  {
    /* There was a problem detecting the BMP085 ... check your connections */
    Serial.print("Ooops, no BMP085 detected ... Check your wiring or I2C ADDR!");
    while(1);
  }
  
  /* Display some basic information on this sensor */
  displaySensorDetails();
}

void loop() {
  

  if (orient_update)  UpdateOrientation();
  if (servo_update)  UpdateServos();
  if (airspeed_update)  UpdateAirspeed();
  if (altitude_update) UpdateAltitude();


}




void UpdateOrientation() {
  
  imu::Vector<3> euler = bno.getVector(Adafruit_BNO055::VECTOR_EULER);
  
  ayaw   = euler.x();
  aroll  = euler.y();
  apitch = euler.z();
  
  orient_update = 0;

  finish = micros();  // Mark loop time for gyro integration
  dt = finish - start;
  start = finish;


}


void UpdateServos() {
  servo_update = 0;

  rollPID.Compute();
  pitchPID.Compute();
  yawPID.Compute();

  // Elevator, LAileron, RAileron
 }//endUpdateServos
 
void UpdateAirspeed() {
  airspeed_update = 0;

  raw_airspeed = analogRead(PITOT_APIN) - PITOT_CENTER;
  if (raw_airspeed <= 0)
    airspeed = 0;
  else
    airspeed = sqrt((2 * (float)raw_airspeed) / 1.225);

  airspeed = .25 * airspeed + .75 * last_airspeed;
  last_airspeed = airspeed;
}//end Update Airspeed

void CenterAll() {
  // Center all servos
 elevatorservo.writeMicroseconds(1500);
 raileronservo.writeMicroseconds(1500);
 laileronservo.writeMicroseconds(1500);
  
}//end Center all


ISR(TIMER2_COMPA_vect)  // Interrupt service routine @ 200Hz
{
  ISR_count++;
  orient_update = 1;  // Update orientation data
  if ((ISR_count % 5 ) == 0)  servo_update = 1;  // Update servo positions
  if ((ISR_count % 25) == 0)  airspeed_update = 1;  // Sample Airspeed
  if ((ISR_count % 40) == 0)  altitude_update =1 ; //sample alitude
 // if ((ISR_count % 60) == 0)  gps_update =1 ; //sample gps
  if (ISR_count >= 250)  ISR_count = 0;  // Reset ISR_count

}//ISR END


void ISR_init(float frequency)
{
  /*  pg. 162
  http://www.atmel.com/images/doc8161.pdf
   */

  cli();                    // Disable global interrupts

  TCCR2A = 0;               // Clear Timer A register
  TCCR2B = 0;               // Clear Timer B register
  TCNT2 = 0;                // Set counter value to 0
  OCR2A = (uint8_t)((16000000 / (frequency * 1024)) - 1);  // Reset value
  TCCR2A |= (1 << WGM21);   // Turn on CTC mode
  TCCR2B = TCCR2B | (1 << CS22) | (1 << CS21) | (1 << CS20);  // 1024 Prescaler
  TIMSK2 |= (1 << OCIE2A);  // Enable compare match interrupt

  sei();                    // Enable global interrupts
}//End ISR INIt

/*
void UpdateGPS(){
  
  
  
}

*/


void UpdateAltitude(){
{sensors_event_t event;
  bmp.getEvent(&event);
 
  /* Display the results (barometric pressure is measure in hPa) */
  if (event.pressure)
  {
    /* Display atmospheric pressue in hPa */
    Serial.print("Pressure:    ");
    Serial.print(event.pressure);
    Serial.println(" hPa");
    
    /* Calculating altitude with reasonable accuracy requires pressure    *
     * sea level pressure for your position at the moment the data is     *
     * converted, as well as the ambient temperature in degress           *
     * celcius.  If you don't have these values, a 'generic' value of     *
     * 1013.25 hPa can be used (defined as SENSORS_PRESSURE_SEALEVELHPA   *
     * in sensors.h), but this isn't ideal and will give variable         *
     * results from one day to the next.                                  *
     *                                                                    *
     * You can usually find the current SLP value by looking at weather   *
     * websites or from environmental information centers near any major  *
     * airport.                                                           *
     *                                                                    *
     * For example, for Paris, France you can check the current mean      *
     * pressure and sea level at: http://bit.ly/16Au8ol                   */
     
    /* First we get the current temperature from the BMP085 */
    float temperature;
    bmp.getTemperature(&temperature);
    Serial.print("Temperature: ");
    Serial.print(temperature);
    Serial.println(" C");

    /* Then convert the atmospheric pressure, and SLP to altitude         */
    /* Update this next line with the current SLP for better results      */
    float seaLevelPressure = SENSORS_PRESSURE_SEALEVELHPA;
    Serial.print("Altitude:    "); 
    Serial.print(bmp.pressureToAltitude(seaLevelPressure,
                                        event.pressure)); 
    Serial.println(" m");
    Serial.println("");
  }
  else
  {
    Serial.println("Sensor error");
  }
}
}//end altitude

void ServoInit() {
  // Initialize control values
  
 
 elevatorservo.attach(elevatorservoo ); 
 raileronservo.attach(raileironservoo);
 laileronservo.attach(laileironservoo);
elevatorservo.writeMicroseconds(1500);
 raileronservo.writeMicroseconds(1500);
 laileronservo.writeMicroseconds(1500);

  

delay(1500);
elevatorservo.writeMicroseconds(1000);
delay(500);
elevatorservo.writeMicroseconds(1500);
delay(500);
elevatorservo.writeMicroseconds(2000);
delay(500);
elevatorservo.writeMicroseconds(1500);


  raileronservo.writeMicroseconds(1000);
  delay(500);
  raileronservo.writeMicroseconds(1500);
  delay(500);
  raileronservo.writeMicroseconds(2000);
  delay(500);
  raileronservo.writeMicroseconds(1500);
  delay(500);
  laileronservo.writeMicroseconds(1000);
   delay(500);
   laileronservo.writeMicroseconds(1500);
   delay(500);
   laileronservo.writeMicroseconds(2000);
   delay(500);
   laileronservo.writeMicroseconds(1500);
  
  delay(1000);
}//end Servo init
